name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # 后端测试和构建
  backend:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./back

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: back/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test
        env:
          NODE_ENV: test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-${{ matrix.node-version }}
          path: back/dist/

  # 前端测试和构建
  frontend:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontier

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontier/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm run test
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontier/dist/

  # 集成测试（需要前后端都构建成功）
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    services:
      # 如果需要数据库服务
      sqlite:
        image: nouchka/sqlite3:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: |
            back/package-lock.json
            frontier/package-lock.json

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build-20.x
          path: back/dist/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-20.x
          path: frontier/dist/

      - name: Install backend dependencies
        run: npm ci
        working-directory: ./back

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontier

      - name: Setup database
        run: |
          cd back
          npm run db:init || echo "Database initialization skipped"
        continue-on-error: true

      - name: Start backend server
        run: |
          cd back
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 7001

      - name: Run integration tests
        run: |
          # 这里可以运行端到端测试
          curl -f http://localhost:7001/api/health || echo "Health check failed"
        continue-on-error: true

      - name: Stop backend server
        run: pkill -f "node.*7001" || true

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史用于SonarQube分析

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install dependencies (backend)
        run: npm ci
        working-directory: ./back

      - name: Install dependencies (frontend)
        run: npm ci
        working-directory: ./frontier

      # 如果使用SonarQube
      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # 或者使用CodeQL分析
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit (backend)
        run: npm audit --audit-level=moderate
        working-directory: ./back
        continue-on-error: true

      - name: Run npm audit (frontend)
        run: npm audit --audit-level=moderate
        working-directory: ./frontier
        continue-on-error: true

      # Snyk安全扫描
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects

  # 部署准备（仅在main分支）
  deploy-preparation:
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r backend-build-20.x deployment/backend
          cp -r frontend-build-20.x deployment/frontend
          cp -r back/package*.json deployment/backend/
          tar -czf deployment.tar.gz deployment/

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 30

      # 如果需要自动部署到服务器
      - name: Deploy to staging
        run: echo "Ready for deployment to staging environment"
        # 这里可以添加实际的部署脚本
